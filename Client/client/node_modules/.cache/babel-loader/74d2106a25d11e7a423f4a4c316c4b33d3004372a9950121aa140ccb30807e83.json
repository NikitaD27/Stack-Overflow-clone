{"ast":null,"code":"// File generated from our OpenAPI spec\n'use strict';\n\nconst StripeResource = require('../StripeResource');\nconst stripeMethod = StripeResource.method;\n// Since path can either be `account` or `accounts`, support both through stripeMethod path;\nmodule.exports = StripeResource.extend({\n  create: stripeMethod({\n    method: 'POST',\n    fullPath: '/v1/accounts'\n  }),\n  retrieve(id) {\n    // No longer allow an api key to be passed as the first string to this function due to ambiguity between\n    // old account ids and api keys. To request the account for an api key, send null as the id\n    if (typeof id === 'string') {\n      return stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/accounts/{id}'\n      }).apply(this, arguments);\n    } else {\n      if (id === null || id === undefined) {\n        // Remove id as stripeMethod would complain of unexpected argument\n        [].shift.apply(arguments);\n      }\n      return stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/account'\n      }).apply(this, arguments);\n    }\n  },\n  update: stripeMethod({\n    method: 'POST',\n    fullPath: '/v1/accounts/{account}'\n  }),\n  list: stripeMethod({\n    method: 'GET',\n    fullPath: '/v1/accounts',\n    methodType: 'list'\n  }),\n  del: stripeMethod({\n    method: 'DELETE',\n    fullPath: '/v1/accounts/{account}'\n  }),\n  reject: stripeMethod({\n    method: 'POST',\n    fullPath: '/v1/accounts/{account}/reject'\n  }),\n  retrieveCapability: stripeMethod({\n    method: 'GET',\n    fullPath: '/v1/accounts/{account}/capabilities/{capability}'\n  }),\n  updateCapability: stripeMethod({\n    method: 'POST',\n    fullPath: '/v1/accounts/{account}/capabilities/{capability}'\n  }),\n  listCapabilities: stripeMethod({\n    method: 'GET',\n    fullPath: '/v1/accounts/{account}/capabilities',\n    methodType: 'list'\n  }),\n  createExternalAccount: stripeMethod({\n    method: 'POST',\n    fullPath: '/v1/accounts/{account}/external_accounts'\n  }),\n  retrieveExternalAccount: stripeMethod({\n    method: 'GET',\n    fullPath: '/v1/accounts/{account}/external_accounts/{id}'\n  }),\n  updateExternalAccount: stripeMethod({\n    method: 'POST',\n    fullPath: '/v1/accounts/{account}/external_accounts/{id}'\n  }),\n  listExternalAccounts: stripeMethod({\n    method: 'GET',\n    fullPath: '/v1/accounts/{account}/external_accounts',\n    methodType: 'list'\n  }),\n  deleteExternalAccount: stripeMethod({\n    method: 'DELETE',\n    fullPath: '/v1/accounts/{account}/external_accounts/{id}'\n  }),\n  createLoginLink: stripeMethod({\n    method: 'POST',\n    fullPath: '/v1/accounts/{account}/login_links'\n  }),\n  createPerson: stripeMethod({\n    method: 'POST',\n    fullPath: '/v1/accounts/{account}/persons'\n  }),\n  retrievePerson: stripeMethod({\n    method: 'GET',\n    fullPath: '/v1/accounts/{account}/persons/{person}'\n  }),\n  updatePerson: stripeMethod({\n    method: 'POST',\n    fullPath: '/v1/accounts/{account}/persons/{person}'\n  }),\n  listPersons: stripeMethod({\n    method: 'GET',\n    fullPath: '/v1/accounts/{account}/persons',\n    methodType: 'list'\n  }),\n  deletePerson: stripeMethod({\n    method: 'DELETE',\n    fullPath: '/v1/accounts/{account}/persons/{person}'\n  })\n});","map":{"version":3,"names":["StripeResource","require","stripeMethod","method","module","exports","extend","create","fullPath","retrieve","id","apply","arguments","undefined","shift","update","list","methodType","del","reject","retrieveCapability","updateCapability","listCapabilities","createExternalAccount","retrieveExternalAccount","updateExternalAccount","listExternalAccounts","deleteExternalAccount","createLoginLink","createPerson","retrievePerson","updatePerson","listPersons","deletePerson"],"sources":["C:/Users/Nikita/Stack Overflow Clone/Client/client/node_modules/stripe/lib/resources/Accounts.js"],"sourcesContent":["// File generated from our OpenAPI spec\n'use strict';\nconst StripeResource = require('../StripeResource');\nconst stripeMethod = StripeResource.method;\n// Since path can either be `account` or `accounts`, support both through stripeMethod path;\nmodule.exports = StripeResource.extend({\n    create: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/accounts',\n    }),\n    retrieve(id) {\n        // No longer allow an api key to be passed as the first string to this function due to ambiguity between\n        // old account ids and api keys. To request the account for an api key, send null as the id\n        if (typeof id === 'string') {\n            return stripeMethod({\n                method: 'GET',\n                fullPath: '/v1/accounts/{id}',\n            }).apply(this, arguments);\n        }\n        else {\n            if (id === null || id === undefined) {\n                // Remove id as stripeMethod would complain of unexpected argument\n                [].shift.apply(arguments);\n            }\n            return stripeMethod({\n                method: 'GET',\n                fullPath: '/v1/account',\n            }).apply(this, arguments);\n        }\n    },\n    update: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/accounts/{account}',\n    }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/accounts',\n        methodType: 'list',\n    }),\n    del: stripeMethod({\n        method: 'DELETE',\n        fullPath: '/v1/accounts/{account}',\n    }),\n    reject: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/accounts/{account}/reject',\n    }),\n    retrieveCapability: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/accounts/{account}/capabilities/{capability}',\n    }),\n    updateCapability: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/accounts/{account}/capabilities/{capability}',\n    }),\n    listCapabilities: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/accounts/{account}/capabilities',\n        methodType: 'list',\n    }),\n    createExternalAccount: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/accounts/{account}/external_accounts',\n    }),\n    retrieveExternalAccount: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/accounts/{account}/external_accounts/{id}',\n    }),\n    updateExternalAccount: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/accounts/{account}/external_accounts/{id}',\n    }),\n    listExternalAccounts: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/accounts/{account}/external_accounts',\n        methodType: 'list',\n    }),\n    deleteExternalAccount: stripeMethod({\n        method: 'DELETE',\n        fullPath: '/v1/accounts/{account}/external_accounts/{id}',\n    }),\n    createLoginLink: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/accounts/{account}/login_links',\n    }),\n    createPerson: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/accounts/{account}/persons',\n    }),\n    retrievePerson: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/accounts/{account}/persons/{person}',\n    }),\n    updatePerson: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/accounts/{account}/persons/{person}',\n    }),\n    listPersons: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/accounts/{account}/persons',\n        methodType: 'list',\n    }),\n    deletePerson: stripeMethod({\n        method: 'DELETE',\n        fullPath: '/v1/accounts/{account}/persons/{person}',\n    }),\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}