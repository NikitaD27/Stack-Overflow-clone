{"ast":null,"code":"\"use strict\";\n\nconst _Error = require(\"./Error\");\nconst resources = require(\"./resources\");\nconst DEFAULT_HOST = 'api.stripe.com';\nconst DEFAULT_PORT = '443';\nconst DEFAULT_BASE_PATH = '/v1/';\nconst DEFAULT_API_VERSION = null;\nconst DEFAULT_TIMEOUT = 80000;\nStripe.PACKAGE_VERSION = require('../package.json').version;\nconst utils = require(\"./utils\");\nconst {\n  determineProcessUserAgentProperties\n} = utils;\nStripe.USER_AGENT = Object.assign({\n  bindings_version: Stripe.PACKAGE_VERSION,\n  lang: 'node',\n  publisher: 'stripe',\n  uname: null,\n  typescript: false\n}, determineProcessUserAgentProperties());\nconst MAX_NETWORK_RETRY_DELAY_SEC = 2;\nconst INITIAL_NETWORK_RETRY_DELAY_SEC = 0.5;\nconst APP_INFO_PROPERTIES = ['name', 'version', 'url', 'partner_id'];\nconst ALLOWED_CONFIG_PROPERTIES = ['apiVersion', 'typescript', 'maxNetworkRetries', 'httpAgent', 'httpClient', 'timeout', 'host', 'port', 'protocol', 'telemetry', 'appInfo', 'stripeAccount'];\nconst StripeResource = require(\"./StripeResource\");\nconst RequestSender = require(\"./RequestSender\");\nStripe.StripeResource = StripeResource;\nStripe.resources = resources;\nconst HttpClient = require(\"./net/HttpClient\");\nStripe.HttpClient = HttpClient.HttpClient;\nStripe.HttpClientResponse = HttpClient.HttpClientResponse;\nconst CryptoProvider = require(\"./crypto/CryptoProvider\");\nStripe.CryptoProvider = CryptoProvider;\n// @ts-ignore\nStripe._platformFunctions = null;\nfunction Stripe(key) {\n  let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (!(this instanceof Stripe)) {\n    return new Stripe(key, config);\n  }\n  const props = this._getPropsFromConfig(config);\n  Object.defineProperty(this, '_emitter', {\n    value: Stripe._platformFunctions.createEmitter(),\n    enumerable: false,\n    configurable: false,\n    writable: false\n  });\n  this.VERSION = Stripe.PACKAGE_VERSION;\n  this.on = this._emitter.on.bind(this._emitter);\n  this.once = this._emitter.once.bind(this._emitter);\n  this.off = this._emitter.removeListener.bind(this._emitter);\n  if (props.protocol && props.protocol !== 'https' && (!props.host || /\\.stripe\\.com$/.test(props.host))) {\n    throw new Error('The `https` protocol must be used when sending requests to `*.stripe.com`');\n  }\n  const agent = props.httpAgent || null;\n  this._api = {\n    auth: null,\n    host: props.host || DEFAULT_HOST,\n    port: props.port || DEFAULT_PORT,\n    protocol: props.protocol || 'https',\n    basePath: DEFAULT_BASE_PATH,\n    version: props.apiVersion || DEFAULT_API_VERSION,\n    timeout: utils.validateInteger('timeout', props.timeout, DEFAULT_TIMEOUT),\n    maxNetworkRetries: utils.validateInteger('maxNetworkRetries', props.maxNetworkRetries, 0),\n    agent: agent,\n    httpClient: props.httpClient || Stripe.createHttpClient(agent),\n    dev: false,\n    stripeAccount: props.stripeAccount || null\n  };\n  const typescript = props.typescript || false;\n  if (typescript !== Stripe.USER_AGENT.typescript) {\n    // The mutation here is uncomfortable, but likely fastest;\n    // serializing the user agent involves shelling out to the system,\n    // and given some users may instantiate the library many times without switching between TS and non-TS,\n    // we only want to incur the performance hit when that actually happens.\n    Stripe.USER_AGENT.typescript = typescript;\n  }\n  if (props.appInfo) {\n    this._setAppInfo(props.appInfo);\n  }\n  this._prepResources();\n  this._setApiKey(key);\n  this.errors = _Error;\n  this.webhooks = require('./Webhooks');\n  this.webhooks._platformFunctions = Stripe._platformFunctions;\n  this._prevRequestMetrics = [];\n  this._enableTelemetry = props.telemetry !== false;\n  this._requestSender = new RequestSender(this, Stripe.StripeResource.MAX_BUFFERED_REQUEST_METRICS);\n  // Expose StripeResource on the instance too\n  // @ts-ignore\n  this.StripeResource = Stripe.StripeResource;\n  this._platformFunctions = Stripe._platformFunctions;\n}\nStripe.errors = _Error;\nStripe.webhooks = require('./Webhooks');\n// @ts-ignore\nStripe.createHttpClient = null;\nStripe.createNodeHttpClient = agent => {\n  throw new Error('Stripe: createNodeHttpClient() is not available in non-Node environments. When instantiating the Stripe client, please set the `httpClient` configuration option to `Stripe.createFetchHttpClient()`, or to your own implementation of `HttpClient`.');\n};\n/**\n * Creates an HTTP client for issuing Stripe API requests which uses the Web\n * Fetch API.\n *\n * A fetch function can optionally be passed in as a parameter. If none is\n * passed, will default to the default `fetch` function in the global scope.\n */\nStripe.createFetchHttpClient = fetchFn => {\n  const {\n    FetchHttpClient\n  } = require('./net/FetchHttpClient');\n  return new FetchHttpClient(fetchFn);\n};\n/**\n * Create a CryptoProvider which uses the built-in Node crypto libraries for\n * its crypto operations.\n */\nStripe.createNodeCryptoProvider = () => {\n  throw new Error('Stripe: `createNodeCryptoProvider()` is not available in non-Node environments. Please use `createSubtleCryptoProvider()` instead.');\n};\n/**\n * Creates a CryptoProvider which uses the Subtle Crypto API from the Web\n * Crypto API spec for its crypto operations.\n *\n * A SubtleCrypto interface can optionally be passed in as a parameter. If none\n * is passed, will default to the default `crypto.subtle` object in the global\n * scope.\n */\nStripe.createSubtleCryptoProvider = subtleCrypto => {\n  const SubtleCryptoProvider = require('./crypto/SubtleCryptoProvider');\n  return new SubtleCryptoProvider(subtleCrypto);\n};\nStripe.prototype = {\n  // Properties are set in the constructor above\n  _appInfo: undefined,\n  on: null,\n  off: null,\n  once: null,\n  VERSION: null,\n  StripeResource: null,\n  webhooks: null,\n  errors: null,\n  _api: null,\n  _prevRequestMetrics: null,\n  _emitter: null,\n  _enableTelemetry: null,\n  _requestSender: null,\n  _platformFunctions: null,\n  /**\n   * @private\n   */\n  _setApiKey(key) {\n    if (key) {\n      this._setApiField('auth', `Bearer ${key}`);\n    }\n  },\n  /**\n   * @private\n   * This may be removed in the future.\n   */\n  _setAppInfo(info) {\n    if (info && typeof info !== 'object') {\n      throw new Error('AppInfo must be an object.');\n    }\n    if (info && !info.name) {\n      throw new Error('AppInfo.name is required');\n    }\n    info = info || {};\n    this._appInfo = APP_INFO_PROPERTIES.reduce((accum, prop) => {\n      if (typeof info[prop] == 'string') {\n        accum = accum || {};\n        accum[prop] = info[prop];\n      }\n      return accum;\n    },\n    // @ts-ignore\n    undefined);\n  },\n  /**\n   * @private\n   * This may be removed in the future.\n   */\n  _setApiField(key, value) {\n    this._api[key] = value;\n  },\n  /**\n   * @private\n   * Please open or upvote an issue at github.com/stripe/stripe-node\n   * if you use this, detailing your use-case.\n   *\n   * It may be deprecated and removed in the future.\n   */\n  getApiField(key) {\n    return this._api[key];\n  },\n  setClientId(clientId) {\n    this._clientId = clientId;\n  },\n  getClientId() {\n    return this._clientId;\n  },\n  /**\n   * @private\n   * Please open or upvote an issue at github.com/stripe/stripe-node\n   * if you use this, detailing your use-case.\n   *\n   * It may be deprecated and removed in the future.\n   */\n  getConstant: c => {\n    switch (c) {\n      case 'DEFAULT_HOST':\n        return DEFAULT_HOST;\n      case 'DEFAULT_PORT':\n        return DEFAULT_PORT;\n      case 'DEFAULT_BASE_PATH':\n        return DEFAULT_BASE_PATH;\n      case 'DEFAULT_API_VERSION':\n        return DEFAULT_API_VERSION;\n      case 'DEFAULT_TIMEOUT':\n        return DEFAULT_TIMEOUT;\n      case 'MAX_NETWORK_RETRY_DELAY_SEC':\n        return MAX_NETWORK_RETRY_DELAY_SEC;\n      case 'INITIAL_NETWORK_RETRY_DELAY_SEC':\n        return INITIAL_NETWORK_RETRY_DELAY_SEC;\n    }\n    return Stripe[c];\n  },\n  getMaxNetworkRetries() {\n    return this.getApiField('maxNetworkRetries');\n  },\n  /**\n   * @private\n   * This may be removed in the future.\n   */\n  _setApiNumberField(prop, n, defaultVal) {\n    const val = utils.validateInteger(prop, n, defaultVal);\n    this._setApiField(prop, val);\n  },\n  getMaxNetworkRetryDelay() {\n    return MAX_NETWORK_RETRY_DELAY_SEC;\n  },\n  getInitialNetworkRetryDelay() {\n    return INITIAL_NETWORK_RETRY_DELAY_SEC;\n  },\n  /**\n   * @private\n   * Please open or upvote an issue at github.com/stripe/stripe-node\n   * if you use this, detailing your use-case.\n   *\n   * It may be deprecated and removed in the future.\n   *\n   * Gets a JSON version of a User-Agent and uses a cached version for a slight\n   * speed advantage.\n   */\n  getClientUserAgent(cb) {\n    return this.getClientUserAgentSeeded(Stripe.USER_AGENT, cb);\n  },\n  /**\n   * @private\n   * Please open or upvote an issue at github.com/stripe/stripe-node\n   * if you use this, detailing your use-case.\n   *\n   * It may be deprecated and removed in the future.\n   *\n   * Gets a JSON version of a User-Agent by encoding a seeded object and\n   * fetching a uname from the system.\n   */\n  getClientUserAgentSeeded(seed, cb) {\n    this._platformFunctions.getUname().then(uname => {\n      var _a;\n      const userAgent = {};\n      for (const field in seed) {\n        userAgent[field] = encodeURIComponent((_a = seed[field]) !== null && _a !== void 0 ? _a : 'null');\n      }\n      // URI-encode in case there are unusual characters in the system's uname.\n      userAgent.uname = encodeURIComponent(uname || 'UNKNOWN');\n      const client = this.getApiField('httpClient');\n      if (client) {\n        userAgent.httplib = encodeURIComponent(client.getClientName());\n      }\n      if (this._appInfo) {\n        userAgent.application = this._appInfo;\n      }\n      cb(JSON.stringify(userAgent));\n    });\n  },\n  /**\n   * @private\n   * Please open or upvote an issue at github.com/stripe/stripe-node\n   * if you use this, detailing your use-case.\n   *\n   * It may be deprecated and removed in the future.\n   */\n  getAppInfoAsString() {\n    if (!this._appInfo) {\n      return '';\n    }\n    let formatted = this._appInfo.name;\n    if (this._appInfo.version) {\n      formatted += `/${this._appInfo.version}`;\n    }\n    if (this._appInfo.url) {\n      formatted += ` (${this._appInfo.url})`;\n    }\n    return formatted;\n  },\n  getTelemetryEnabled() {\n    return this._enableTelemetry;\n  },\n  /**\n   * @private\n   * This may be removed in the future.\n   */\n  _prepResources() {\n    for (const name in resources) {\n      // @ts-ignore\n      this[utils.pascalToCamelCase(name)] = new resources[name](this);\n    }\n  },\n  /**\n   * @private\n   * This may be removed in the future.\n   */\n  _getPropsFromConfig(config) {\n    // If config is null or undefined, just bail early with no props\n    if (!config) {\n      return {};\n    }\n    // config can be an object or a string\n    const isString = typeof config === 'string';\n    const isObject = config === Object(config) && !Array.isArray(config);\n    if (!isObject && !isString) {\n      throw new Error('Config must either be an object or a string');\n    }\n    // If config is a string, we assume the old behavior of passing in a string representation of the api version\n    if (isString) {\n      return {\n        apiVersion: config\n      };\n    }\n    // If config is an object, we assume the new behavior and make sure it doesn't contain any unexpected values\n    const values = Object.keys(config).filter(value => !ALLOWED_CONFIG_PROPERTIES.includes(value));\n    if (values.length > 0) {\n      throw new Error(`Config object may only contain the following: ${ALLOWED_CONFIG_PROPERTIES.join(', ')}`);\n    }\n    return config;\n  }\n};\nmodule.exports = Stripe;","map":{"version":3,"names":["_Error","require","resources","DEFAULT_HOST","DEFAULT_PORT","DEFAULT_BASE_PATH","DEFAULT_API_VERSION","DEFAULT_TIMEOUT","Stripe","PACKAGE_VERSION","version","utils","determineProcessUserAgentProperties","USER_AGENT","Object","assign","bindings_version","lang","publisher","uname","typescript","MAX_NETWORK_RETRY_DELAY_SEC","INITIAL_NETWORK_RETRY_DELAY_SEC","APP_INFO_PROPERTIES","ALLOWED_CONFIG_PROPERTIES","StripeResource","RequestSender","HttpClient","HttpClientResponse","CryptoProvider","_platformFunctions","key","config","props","_getPropsFromConfig","defineProperty","value","createEmitter","enumerable","configurable","writable","VERSION","on","_emitter","bind","once","off","removeListener","protocol","host","test","Error","agent","httpAgent","_api","auth","port","basePath","apiVersion","timeout","validateInteger","maxNetworkRetries","httpClient","createHttpClient","dev","stripeAccount","appInfo","_setAppInfo","_prepResources","_setApiKey","errors","webhooks","_prevRequestMetrics","_enableTelemetry","telemetry","_requestSender","MAX_BUFFERED_REQUEST_METRICS","createNodeHttpClient","createFetchHttpClient","fetchFn","FetchHttpClient","createNodeCryptoProvider","createSubtleCryptoProvider","subtleCrypto","SubtleCryptoProvider","prototype","_appInfo","undefined","_setApiField","info","name","reduce","accum","prop","getApiField","setClientId","clientId","_clientId","getClientId","getConstant","c","getMaxNetworkRetries","_setApiNumberField","n","defaultVal","val","getMaxNetworkRetryDelay","getInitialNetworkRetryDelay","getClientUserAgent","cb","getClientUserAgentSeeded","seed","getUname","then","_a","userAgent","field","encodeURIComponent","client","httplib","getClientName","application","JSON","stringify","getAppInfoAsString","formatted","url","getTelemetryEnabled","pascalToCamelCase","isString","isObject","Array","isArray","values","keys","filter","includes","length","join","module","exports"],"sources":["C:/Users/Nikita/Stack Overflow Clone/Client/client/node_modules/stripe/lib/stripe.common.js"],"sourcesContent":["\"use strict\";\nconst _Error = require(\"./Error\");\nconst resources = require(\"./resources\");\nconst DEFAULT_HOST = 'api.stripe.com';\nconst DEFAULT_PORT = '443';\nconst DEFAULT_BASE_PATH = '/v1/';\nconst DEFAULT_API_VERSION = null;\nconst DEFAULT_TIMEOUT = 80000;\nStripe.PACKAGE_VERSION = require('../package.json').version;\nconst utils = require(\"./utils\");\nconst { determineProcessUserAgentProperties } = utils;\nStripe.USER_AGENT = Object.assign({ bindings_version: Stripe.PACKAGE_VERSION, lang: 'node', publisher: 'stripe', uname: null, typescript: false }, determineProcessUserAgentProperties());\nconst MAX_NETWORK_RETRY_DELAY_SEC = 2;\nconst INITIAL_NETWORK_RETRY_DELAY_SEC = 0.5;\nconst APP_INFO_PROPERTIES = ['name', 'version', 'url', 'partner_id'];\nconst ALLOWED_CONFIG_PROPERTIES = [\n    'apiVersion',\n    'typescript',\n    'maxNetworkRetries',\n    'httpAgent',\n    'httpClient',\n    'timeout',\n    'host',\n    'port',\n    'protocol',\n    'telemetry',\n    'appInfo',\n    'stripeAccount',\n];\nconst StripeResource = require(\"./StripeResource\");\nconst RequestSender = require(\"./RequestSender\");\nStripe.StripeResource = StripeResource;\nStripe.resources = resources;\nconst HttpClient = require(\"./net/HttpClient\");\nStripe.HttpClient = HttpClient.HttpClient;\nStripe.HttpClientResponse = HttpClient.HttpClientResponse;\nconst CryptoProvider = require(\"./crypto/CryptoProvider\");\nStripe.CryptoProvider = CryptoProvider;\n// @ts-ignore\nStripe._platformFunctions = null;\nfunction Stripe(key, config = {}) {\n    if (!(this instanceof Stripe)) {\n        return new Stripe(key, config);\n    }\n    const props = this._getPropsFromConfig(config);\n    Object.defineProperty(this, '_emitter', {\n        value: Stripe._platformFunctions.createEmitter(),\n        enumerable: false,\n        configurable: false,\n        writable: false,\n    });\n    this.VERSION = Stripe.PACKAGE_VERSION;\n    this.on = this._emitter.on.bind(this._emitter);\n    this.once = this._emitter.once.bind(this._emitter);\n    this.off = this._emitter.removeListener.bind(this._emitter);\n    if (props.protocol &&\n        props.protocol !== 'https' &&\n        (!props.host || /\\.stripe\\.com$/.test(props.host))) {\n        throw new Error('The `https` protocol must be used when sending requests to `*.stripe.com`');\n    }\n    const agent = props.httpAgent || null;\n    this._api = {\n        auth: null,\n        host: props.host || DEFAULT_HOST,\n        port: props.port || DEFAULT_PORT,\n        protocol: props.protocol || 'https',\n        basePath: DEFAULT_BASE_PATH,\n        version: props.apiVersion || DEFAULT_API_VERSION,\n        timeout: utils.validateInteger('timeout', props.timeout, DEFAULT_TIMEOUT),\n        maxNetworkRetries: utils.validateInteger('maxNetworkRetries', props.maxNetworkRetries, 0),\n        agent: agent,\n        httpClient: props.httpClient || Stripe.createHttpClient(agent),\n        dev: false,\n        stripeAccount: props.stripeAccount || null,\n    };\n    const typescript = props.typescript || false;\n    if (typescript !== Stripe.USER_AGENT.typescript) {\n        // The mutation here is uncomfortable, but likely fastest;\n        // serializing the user agent involves shelling out to the system,\n        // and given some users may instantiate the library many times without switching between TS and non-TS,\n        // we only want to incur the performance hit when that actually happens.\n        Stripe.USER_AGENT.typescript = typescript;\n    }\n    if (props.appInfo) {\n        this._setAppInfo(props.appInfo);\n    }\n    this._prepResources();\n    this._setApiKey(key);\n    this.errors = _Error;\n    this.webhooks = require('./Webhooks');\n    this.webhooks._platformFunctions = Stripe._platformFunctions;\n    this._prevRequestMetrics = [];\n    this._enableTelemetry = props.telemetry !== false;\n    this._requestSender = new RequestSender(this, Stripe.StripeResource.MAX_BUFFERED_REQUEST_METRICS);\n    // Expose StripeResource on the instance too\n    // @ts-ignore\n    this.StripeResource = Stripe.StripeResource;\n    this._platformFunctions = Stripe._platformFunctions;\n}\nStripe.errors = _Error;\nStripe.webhooks = require('./Webhooks');\n// @ts-ignore\nStripe.createHttpClient = null;\nStripe.createNodeHttpClient = (agent) => {\n    throw new Error('Stripe: createNodeHttpClient() is not available in non-Node environments. When instantiating the Stripe client, please set the `httpClient` configuration option to `Stripe.createFetchHttpClient()`, or to your own implementation of `HttpClient`.');\n};\n/**\n * Creates an HTTP client for issuing Stripe API requests which uses the Web\n * Fetch API.\n *\n * A fetch function can optionally be passed in as a parameter. If none is\n * passed, will default to the default `fetch` function in the global scope.\n */\nStripe.createFetchHttpClient = (fetchFn) => {\n    const { FetchHttpClient } = require('./net/FetchHttpClient');\n    return new FetchHttpClient(fetchFn);\n};\n/**\n * Create a CryptoProvider which uses the built-in Node crypto libraries for\n * its crypto operations.\n */\nStripe.createNodeCryptoProvider = () => {\n    throw new Error('Stripe: `createNodeCryptoProvider()` is not available in non-Node environments. Please use `createSubtleCryptoProvider()` instead.');\n};\n/**\n * Creates a CryptoProvider which uses the Subtle Crypto API from the Web\n * Crypto API spec for its crypto operations.\n *\n * A SubtleCrypto interface can optionally be passed in as a parameter. If none\n * is passed, will default to the default `crypto.subtle` object in the global\n * scope.\n */\nStripe.createSubtleCryptoProvider = (subtleCrypto) => {\n    const SubtleCryptoProvider = require('./crypto/SubtleCryptoProvider');\n    return new SubtleCryptoProvider(subtleCrypto);\n};\nStripe.prototype = {\n    // Properties are set in the constructor above\n    _appInfo: undefined,\n    on: null,\n    off: null,\n    once: null,\n    VERSION: null,\n    StripeResource: null,\n    webhooks: null,\n    errors: null,\n    _api: null,\n    _prevRequestMetrics: null,\n    _emitter: null,\n    _enableTelemetry: null,\n    _requestSender: null,\n    _platformFunctions: null,\n    /**\n     * @private\n     */\n    _setApiKey(key) {\n        if (key) {\n            this._setApiField('auth', `Bearer ${key}`);\n        }\n    },\n    /**\n     * @private\n     * This may be removed in the future.\n     */\n    _setAppInfo(info) {\n        if (info && typeof info !== 'object') {\n            throw new Error('AppInfo must be an object.');\n        }\n        if (info && !info.name) {\n            throw new Error('AppInfo.name is required');\n        }\n        info = info || {};\n        this._appInfo = APP_INFO_PROPERTIES.reduce((accum, prop) => {\n            if (typeof info[prop] == 'string') {\n                accum = accum || {};\n                accum[prop] = info[prop];\n            }\n            return accum;\n        }, \n        // @ts-ignore\n        undefined);\n    },\n    /**\n     * @private\n     * This may be removed in the future.\n     */\n    _setApiField(key, value) {\n        this._api[key] = value;\n    },\n    /**\n     * @private\n     * Please open or upvote an issue at github.com/stripe/stripe-node\n     * if you use this, detailing your use-case.\n     *\n     * It may be deprecated and removed in the future.\n     */\n    getApiField(key) {\n        return this._api[key];\n    },\n    setClientId(clientId) {\n        this._clientId = clientId;\n    },\n    getClientId() {\n        return this._clientId;\n    },\n    /**\n     * @private\n     * Please open or upvote an issue at github.com/stripe/stripe-node\n     * if you use this, detailing your use-case.\n     *\n     * It may be deprecated and removed in the future.\n     */\n    getConstant: (c) => {\n        switch (c) {\n            case 'DEFAULT_HOST':\n                return DEFAULT_HOST;\n            case 'DEFAULT_PORT':\n                return DEFAULT_PORT;\n            case 'DEFAULT_BASE_PATH':\n                return DEFAULT_BASE_PATH;\n            case 'DEFAULT_API_VERSION':\n                return DEFAULT_API_VERSION;\n            case 'DEFAULT_TIMEOUT':\n                return DEFAULT_TIMEOUT;\n            case 'MAX_NETWORK_RETRY_DELAY_SEC':\n                return MAX_NETWORK_RETRY_DELAY_SEC;\n            case 'INITIAL_NETWORK_RETRY_DELAY_SEC':\n                return INITIAL_NETWORK_RETRY_DELAY_SEC;\n        }\n        return Stripe[c];\n    },\n    getMaxNetworkRetries() {\n        return this.getApiField('maxNetworkRetries');\n    },\n    /**\n     * @private\n     * This may be removed in the future.\n     */\n    _setApiNumberField(prop, n, defaultVal) {\n        const val = utils.validateInteger(prop, n, defaultVal);\n        this._setApiField(prop, val);\n    },\n    getMaxNetworkRetryDelay() {\n        return MAX_NETWORK_RETRY_DELAY_SEC;\n    },\n    getInitialNetworkRetryDelay() {\n        return INITIAL_NETWORK_RETRY_DELAY_SEC;\n    },\n    /**\n     * @private\n     * Please open or upvote an issue at github.com/stripe/stripe-node\n     * if you use this, detailing your use-case.\n     *\n     * It may be deprecated and removed in the future.\n     *\n     * Gets a JSON version of a User-Agent and uses a cached version for a slight\n     * speed advantage.\n     */\n    getClientUserAgent(cb) {\n        return this.getClientUserAgentSeeded(Stripe.USER_AGENT, cb);\n    },\n    /**\n     * @private\n     * Please open or upvote an issue at github.com/stripe/stripe-node\n     * if you use this, detailing your use-case.\n     *\n     * It may be deprecated and removed in the future.\n     *\n     * Gets a JSON version of a User-Agent by encoding a seeded object and\n     * fetching a uname from the system.\n     */\n    getClientUserAgentSeeded(seed, cb) {\n        this._platformFunctions.getUname().then((uname) => {\n            var _a;\n            const userAgent = {};\n            for (const field in seed) {\n                userAgent[field] = encodeURIComponent((_a = seed[field]) !== null && _a !== void 0 ? _a : 'null');\n            }\n            // URI-encode in case there are unusual characters in the system's uname.\n            userAgent.uname = encodeURIComponent(uname || 'UNKNOWN');\n            const client = this.getApiField('httpClient');\n            if (client) {\n                userAgent.httplib = encodeURIComponent(client.getClientName());\n            }\n            if (this._appInfo) {\n                userAgent.application = this._appInfo;\n            }\n            cb(JSON.stringify(userAgent));\n        });\n    },\n    /**\n     * @private\n     * Please open or upvote an issue at github.com/stripe/stripe-node\n     * if you use this, detailing your use-case.\n     *\n     * It may be deprecated and removed in the future.\n     */\n    getAppInfoAsString() {\n        if (!this._appInfo) {\n            return '';\n        }\n        let formatted = this._appInfo.name;\n        if (this._appInfo.version) {\n            formatted += `/${this._appInfo.version}`;\n        }\n        if (this._appInfo.url) {\n            formatted += ` (${this._appInfo.url})`;\n        }\n        return formatted;\n    },\n    getTelemetryEnabled() {\n        return this._enableTelemetry;\n    },\n    /**\n     * @private\n     * This may be removed in the future.\n     */\n    _prepResources() {\n        for (const name in resources) {\n            // @ts-ignore\n            this[utils.pascalToCamelCase(name)] = new resources[name](this);\n        }\n    },\n    /**\n     * @private\n     * This may be removed in the future.\n     */\n    _getPropsFromConfig(config) {\n        // If config is null or undefined, just bail early with no props\n        if (!config) {\n            return {};\n        }\n        // config can be an object or a string\n        const isString = typeof config === 'string';\n        const isObject = config === Object(config) && !Array.isArray(config);\n        if (!isObject && !isString) {\n            throw new Error('Config must either be an object or a string');\n        }\n        // If config is a string, we assume the old behavior of passing in a string representation of the api version\n        if (isString) {\n            return {\n                apiVersion: config,\n            };\n        }\n        // If config is an object, we assume the new behavior and make sure it doesn't contain any unexpected values\n        const values = Object.keys(config).filter((value) => !ALLOWED_CONFIG_PROPERTIES.includes(value));\n        if (values.length > 0) {\n            throw new Error(`Config object may only contain the following: ${ALLOWED_CONFIG_PROPERTIES.join(', ')}`);\n        }\n        return config;\n    },\n};\nmodule.exports = Stripe;\n"],"mappings":"AAAA,YAAY;;AACZ,MAAMA,MAAM,GAAGC,OAAO,CAAC,SAAS,CAAC;AACjC,MAAMC,SAAS,GAAGD,OAAO,CAAC,aAAa,CAAC;AACxC,MAAME,YAAY,GAAG,gBAAgB;AACrC,MAAMC,YAAY,GAAG,KAAK;AAC1B,MAAMC,iBAAiB,GAAG,MAAM;AAChC,MAAMC,mBAAmB,GAAG,IAAI;AAChC,MAAMC,eAAe,GAAG,KAAK;AAC7BC,MAAM,CAACC,eAAe,GAAGR,OAAO,CAAC,iBAAiB,CAAC,CAACS,OAAO;AAC3D,MAAMC,KAAK,GAAGV,OAAO,CAAC,SAAS,CAAC;AAChC,MAAM;EAAEW;AAAoC,CAAC,GAAGD,KAAK;AACrDH,MAAM,CAACK,UAAU,GAAGC,MAAM,CAACC,MAAM,CAAC;EAAEC,gBAAgB,EAAER,MAAM,CAACC,eAAe;EAAEQ,IAAI,EAAE,MAAM;EAAEC,SAAS,EAAE,QAAQ;EAAEC,KAAK,EAAE,IAAI;EAAEC,UAAU,EAAE;AAAM,CAAC,EAAER,mCAAmC,EAAE,CAAC;AACzL,MAAMS,2BAA2B,GAAG,CAAC;AACrC,MAAMC,+BAA+B,GAAG,GAAG;AAC3C,MAAMC,mBAAmB,GAAG,CAAC,MAAM,EAAE,SAAS,EAAE,KAAK,EAAE,YAAY,CAAC;AACpE,MAAMC,yBAAyB,GAAG,CAC9B,YAAY,EACZ,YAAY,EACZ,mBAAmB,EACnB,WAAW,EACX,YAAY,EACZ,SAAS,EACT,MAAM,EACN,MAAM,EACN,UAAU,EACV,WAAW,EACX,SAAS,EACT,eAAe,CAClB;AACD,MAAMC,cAAc,GAAGxB,OAAO,CAAC,kBAAkB,CAAC;AAClD,MAAMyB,aAAa,GAAGzB,OAAO,CAAC,iBAAiB,CAAC;AAChDO,MAAM,CAACiB,cAAc,GAAGA,cAAc;AACtCjB,MAAM,CAACN,SAAS,GAAGA,SAAS;AAC5B,MAAMyB,UAAU,GAAG1B,OAAO,CAAC,kBAAkB,CAAC;AAC9CO,MAAM,CAACmB,UAAU,GAAGA,UAAU,CAACA,UAAU;AACzCnB,MAAM,CAACoB,kBAAkB,GAAGD,UAAU,CAACC,kBAAkB;AACzD,MAAMC,cAAc,GAAG5B,OAAO,CAAC,yBAAyB,CAAC;AACzDO,MAAM,CAACqB,cAAc,GAAGA,cAAc;AACtC;AACArB,MAAM,CAACsB,kBAAkB,GAAG,IAAI;AAChC,SAAStB,MAAM,CAACuB,GAAG,EAAe;EAAA,IAAbC,MAAM,uEAAG,CAAC,CAAC;EAC5B,IAAI,EAAE,IAAI,YAAYxB,MAAM,CAAC,EAAE;IAC3B,OAAO,IAAIA,MAAM,CAACuB,GAAG,EAAEC,MAAM,CAAC;EAClC;EACA,MAAMC,KAAK,GAAG,IAAI,CAACC,mBAAmB,CAACF,MAAM,CAAC;EAC9ClB,MAAM,CAACqB,cAAc,CAAC,IAAI,EAAE,UAAU,EAAE;IACpCC,KAAK,EAAE5B,MAAM,CAACsB,kBAAkB,CAACO,aAAa,EAAE;IAChDC,UAAU,EAAE,KAAK;IACjBC,YAAY,EAAE,KAAK;IACnBC,QAAQ,EAAE;EACd,CAAC,CAAC;EACF,IAAI,CAACC,OAAO,GAAGjC,MAAM,CAACC,eAAe;EACrC,IAAI,CAACiC,EAAE,GAAG,IAAI,CAACC,QAAQ,CAACD,EAAE,CAACE,IAAI,CAAC,IAAI,CAACD,QAAQ,CAAC;EAC9C,IAAI,CAACE,IAAI,GAAG,IAAI,CAACF,QAAQ,CAACE,IAAI,CAACD,IAAI,CAAC,IAAI,CAACD,QAAQ,CAAC;EAClD,IAAI,CAACG,GAAG,GAAG,IAAI,CAACH,QAAQ,CAACI,cAAc,CAACH,IAAI,CAAC,IAAI,CAACD,QAAQ,CAAC;EAC3D,IAAIV,KAAK,CAACe,QAAQ,IACdf,KAAK,CAACe,QAAQ,KAAK,OAAO,KACzB,CAACf,KAAK,CAACgB,IAAI,IAAI,gBAAgB,CAACC,IAAI,CAACjB,KAAK,CAACgB,IAAI,CAAC,CAAC,EAAE;IACpD,MAAM,IAAIE,KAAK,CAAC,2EAA2E,CAAC;EAChG;EACA,MAAMC,KAAK,GAAGnB,KAAK,CAACoB,SAAS,IAAI,IAAI;EACrC,IAAI,CAACC,IAAI,GAAG;IACRC,IAAI,EAAE,IAAI;IACVN,IAAI,EAAEhB,KAAK,CAACgB,IAAI,IAAI9C,YAAY;IAChCqD,IAAI,EAAEvB,KAAK,CAACuB,IAAI,IAAIpD,YAAY;IAChC4C,QAAQ,EAAEf,KAAK,CAACe,QAAQ,IAAI,OAAO;IACnCS,QAAQ,EAAEpD,iBAAiB;IAC3BK,OAAO,EAAEuB,KAAK,CAACyB,UAAU,IAAIpD,mBAAmB;IAChDqD,OAAO,EAAEhD,KAAK,CAACiD,eAAe,CAAC,SAAS,EAAE3B,KAAK,CAAC0B,OAAO,EAAEpD,eAAe,CAAC;IACzEsD,iBAAiB,EAAElD,KAAK,CAACiD,eAAe,CAAC,mBAAmB,EAAE3B,KAAK,CAAC4B,iBAAiB,EAAE,CAAC,CAAC;IACzFT,KAAK,EAAEA,KAAK;IACZU,UAAU,EAAE7B,KAAK,CAAC6B,UAAU,IAAItD,MAAM,CAACuD,gBAAgB,CAACX,KAAK,CAAC;IAC9DY,GAAG,EAAE,KAAK;IACVC,aAAa,EAAEhC,KAAK,CAACgC,aAAa,IAAI;EAC1C,CAAC;EACD,MAAM7C,UAAU,GAAGa,KAAK,CAACb,UAAU,IAAI,KAAK;EAC5C,IAAIA,UAAU,KAAKZ,MAAM,CAACK,UAAU,CAACO,UAAU,EAAE;IAC7C;IACA;IACA;IACA;IACAZ,MAAM,CAACK,UAAU,CAACO,UAAU,GAAGA,UAAU;EAC7C;EACA,IAAIa,KAAK,CAACiC,OAAO,EAAE;IACf,IAAI,CAACC,WAAW,CAAClC,KAAK,CAACiC,OAAO,CAAC;EACnC;EACA,IAAI,CAACE,cAAc,EAAE;EACrB,IAAI,CAACC,UAAU,CAACtC,GAAG,CAAC;EACpB,IAAI,CAACuC,MAAM,GAAGtE,MAAM;EACpB,IAAI,CAACuE,QAAQ,GAAGtE,OAAO,CAAC,YAAY,CAAC;EACrC,IAAI,CAACsE,QAAQ,CAACzC,kBAAkB,GAAGtB,MAAM,CAACsB,kBAAkB;EAC5D,IAAI,CAAC0C,mBAAmB,GAAG,EAAE;EAC7B,IAAI,CAACC,gBAAgB,GAAGxC,KAAK,CAACyC,SAAS,KAAK,KAAK;EACjD,IAAI,CAACC,cAAc,GAAG,IAAIjD,aAAa,CAAC,IAAI,EAAElB,MAAM,CAACiB,cAAc,CAACmD,4BAA4B,CAAC;EACjG;EACA;EACA,IAAI,CAACnD,cAAc,GAAGjB,MAAM,CAACiB,cAAc;EAC3C,IAAI,CAACK,kBAAkB,GAAGtB,MAAM,CAACsB,kBAAkB;AACvD;AACAtB,MAAM,CAAC8D,MAAM,GAAGtE,MAAM;AACtBQ,MAAM,CAAC+D,QAAQ,GAAGtE,OAAO,CAAC,YAAY,CAAC;AACvC;AACAO,MAAM,CAACuD,gBAAgB,GAAG,IAAI;AAC9BvD,MAAM,CAACqE,oBAAoB,GAAIzB,KAAK,IAAK;EACrC,MAAM,IAAID,KAAK,CAAC,sPAAsP,CAAC;AAC3Q,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA3C,MAAM,CAACsE,qBAAqB,GAAIC,OAAO,IAAK;EACxC,MAAM;IAAEC;EAAgB,CAAC,GAAG/E,OAAO,CAAC,uBAAuB,CAAC;EAC5D,OAAO,IAAI+E,eAAe,CAACD,OAAO,CAAC;AACvC,CAAC;AACD;AACA;AACA;AACA;AACAvE,MAAM,CAACyE,wBAAwB,GAAG,MAAM;EACpC,MAAM,IAAI9B,KAAK,CAAC,oIAAoI,CAAC;AACzJ,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA3C,MAAM,CAAC0E,0BAA0B,GAAIC,YAAY,IAAK;EAClD,MAAMC,oBAAoB,GAAGnF,OAAO,CAAC,+BAA+B,CAAC;EACrE,OAAO,IAAImF,oBAAoB,CAACD,YAAY,CAAC;AACjD,CAAC;AACD3E,MAAM,CAAC6E,SAAS,GAAG;EACf;EACAC,QAAQ,EAAEC,SAAS;EACnB7C,EAAE,EAAE,IAAI;EACRI,GAAG,EAAE,IAAI;EACTD,IAAI,EAAE,IAAI;EACVJ,OAAO,EAAE,IAAI;EACbhB,cAAc,EAAE,IAAI;EACpB8C,QAAQ,EAAE,IAAI;EACdD,MAAM,EAAE,IAAI;EACZhB,IAAI,EAAE,IAAI;EACVkB,mBAAmB,EAAE,IAAI;EACzB7B,QAAQ,EAAE,IAAI;EACd8B,gBAAgB,EAAE,IAAI;EACtBE,cAAc,EAAE,IAAI;EACpB7C,kBAAkB,EAAE,IAAI;EACxB;AACJ;AACA;EACIuC,UAAU,CAACtC,GAAG,EAAE;IACZ,IAAIA,GAAG,EAAE;MACL,IAAI,CAACyD,YAAY,CAAC,MAAM,EAAG,UAASzD,GAAI,EAAC,CAAC;IAC9C;EACJ,CAAC;EACD;AACJ;AACA;AACA;EACIoC,WAAW,CAACsB,IAAI,EAAE;IACd,IAAIA,IAAI,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;MAClC,MAAM,IAAItC,KAAK,CAAC,4BAA4B,CAAC;IACjD;IACA,IAAIsC,IAAI,IAAI,CAACA,IAAI,CAACC,IAAI,EAAE;MACpB,MAAM,IAAIvC,KAAK,CAAC,0BAA0B,CAAC;IAC/C;IACAsC,IAAI,GAAGA,IAAI,IAAI,CAAC,CAAC;IACjB,IAAI,CAACH,QAAQ,GAAG/D,mBAAmB,CAACoE,MAAM,CAAC,CAACC,KAAK,EAAEC,IAAI,KAAK;MACxD,IAAI,OAAOJ,IAAI,CAACI,IAAI,CAAC,IAAI,QAAQ,EAAE;QAC/BD,KAAK,GAAGA,KAAK,IAAI,CAAC,CAAC;QACnBA,KAAK,CAACC,IAAI,CAAC,GAAGJ,IAAI,CAACI,IAAI,CAAC;MAC5B;MACA,OAAOD,KAAK;IAChB,CAAC;IACD;IACAL,SAAS,CAAC;EACd,CAAC;EACD;AACJ;AACA;AACA;EACIC,YAAY,CAACzD,GAAG,EAAEK,KAAK,EAAE;IACrB,IAAI,CAACkB,IAAI,CAACvB,GAAG,CAAC,GAAGK,KAAK;EAC1B,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;EACI0D,WAAW,CAAC/D,GAAG,EAAE;IACb,OAAO,IAAI,CAACuB,IAAI,CAACvB,GAAG,CAAC;EACzB,CAAC;EACDgE,WAAW,CAACC,QAAQ,EAAE;IAClB,IAAI,CAACC,SAAS,GAAGD,QAAQ;EAC7B,CAAC;EACDE,WAAW,GAAG;IACV,OAAO,IAAI,CAACD,SAAS;EACzB,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;EACIE,WAAW,EAAGC,CAAC,IAAK;IAChB,QAAQA,CAAC;MACL,KAAK,cAAc;QACf,OAAOjG,YAAY;MACvB,KAAK,cAAc;QACf,OAAOC,YAAY;MACvB,KAAK,mBAAmB;QACpB,OAAOC,iBAAiB;MAC5B,KAAK,qBAAqB;QACtB,OAAOC,mBAAmB;MAC9B,KAAK,iBAAiB;QAClB,OAAOC,eAAe;MAC1B,KAAK,6BAA6B;QAC9B,OAAOc,2BAA2B;MACtC,KAAK,iCAAiC;QAClC,OAAOC,+BAA+B;IAAC;IAE/C,OAAOd,MAAM,CAAC4F,CAAC,CAAC;EACpB,CAAC;EACDC,oBAAoB,GAAG;IACnB,OAAO,IAAI,CAACP,WAAW,CAAC,mBAAmB,CAAC;EAChD,CAAC;EACD;AACJ;AACA;AACA;EACIQ,kBAAkB,CAACT,IAAI,EAAEU,CAAC,EAAEC,UAAU,EAAE;IACpC,MAAMC,GAAG,GAAG9F,KAAK,CAACiD,eAAe,CAACiC,IAAI,EAAEU,CAAC,EAAEC,UAAU,CAAC;IACtD,IAAI,CAAChB,YAAY,CAACK,IAAI,EAAEY,GAAG,CAAC;EAChC,CAAC;EACDC,uBAAuB,GAAG;IACtB,OAAOrF,2BAA2B;EACtC,CAAC;EACDsF,2BAA2B,GAAG;IAC1B,OAAOrF,+BAA+B;EAC1C,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIsF,kBAAkB,CAACC,EAAE,EAAE;IACnB,OAAO,IAAI,CAACC,wBAAwB,CAACtG,MAAM,CAACK,UAAU,EAAEgG,EAAE,CAAC;EAC/D,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,wBAAwB,CAACC,IAAI,EAAEF,EAAE,EAAE;IAC/B,IAAI,CAAC/E,kBAAkB,CAACkF,QAAQ,EAAE,CAACC,IAAI,CAAE9F,KAAK,IAAK;MAC/C,IAAI+F,EAAE;MACN,MAAMC,SAAS,GAAG,CAAC,CAAC;MACpB,KAAK,MAAMC,KAAK,IAAIL,IAAI,EAAE;QACtBI,SAAS,CAACC,KAAK,CAAC,GAAGC,kBAAkB,CAAC,CAACH,EAAE,GAAGH,IAAI,CAACK,KAAK,CAAC,MAAM,IAAI,IAAIF,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,MAAM,CAAC;MACrG;MACA;MACAC,SAAS,CAAChG,KAAK,GAAGkG,kBAAkB,CAAClG,KAAK,IAAI,SAAS,CAAC;MACxD,MAAMmG,MAAM,GAAG,IAAI,CAACxB,WAAW,CAAC,YAAY,CAAC;MAC7C,IAAIwB,MAAM,EAAE;QACRH,SAAS,CAACI,OAAO,GAAGF,kBAAkB,CAACC,MAAM,CAACE,aAAa,EAAE,CAAC;MAClE;MACA,IAAI,IAAI,CAAClC,QAAQ,EAAE;QACf6B,SAAS,CAACM,WAAW,GAAG,IAAI,CAACnC,QAAQ;MACzC;MACAuB,EAAE,CAACa,IAAI,CAACC,SAAS,CAACR,SAAS,CAAC,CAAC;IACjC,CAAC,CAAC;EACN,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;EACIS,kBAAkB,GAAG;IACjB,IAAI,CAAC,IAAI,CAACtC,QAAQ,EAAE;MAChB,OAAO,EAAE;IACb;IACA,IAAIuC,SAAS,GAAG,IAAI,CAACvC,QAAQ,CAACI,IAAI;IAClC,IAAI,IAAI,CAACJ,QAAQ,CAAC5E,OAAO,EAAE;MACvBmH,SAAS,IAAK,IAAG,IAAI,CAACvC,QAAQ,CAAC5E,OAAQ,EAAC;IAC5C;IACA,IAAI,IAAI,CAAC4E,QAAQ,CAACwC,GAAG,EAAE;MACnBD,SAAS,IAAK,KAAI,IAAI,CAACvC,QAAQ,CAACwC,GAAI,GAAE;IAC1C;IACA,OAAOD,SAAS;EACpB,CAAC;EACDE,mBAAmB,GAAG;IAClB,OAAO,IAAI,CAACtD,gBAAgB;EAChC,CAAC;EACD;AACJ;AACA;AACA;EACIL,cAAc,GAAG;IACb,KAAK,MAAMsB,IAAI,IAAIxF,SAAS,EAAE;MAC1B;MACA,IAAI,CAACS,KAAK,CAACqH,iBAAiB,CAACtC,IAAI,CAAC,CAAC,GAAG,IAAIxF,SAAS,CAACwF,IAAI,CAAC,CAAC,IAAI,CAAC;IACnE;EACJ,CAAC;EACD;AACJ;AACA;AACA;EACIxD,mBAAmB,CAACF,MAAM,EAAE;IACxB;IACA,IAAI,CAACA,MAAM,EAAE;MACT,OAAO,CAAC,CAAC;IACb;IACA;IACA,MAAMiG,QAAQ,GAAG,OAAOjG,MAAM,KAAK,QAAQ;IAC3C,MAAMkG,QAAQ,GAAGlG,MAAM,KAAKlB,MAAM,CAACkB,MAAM,CAAC,IAAI,CAACmG,KAAK,CAACC,OAAO,CAACpG,MAAM,CAAC;IACpE,IAAI,CAACkG,QAAQ,IAAI,CAACD,QAAQ,EAAE;MACxB,MAAM,IAAI9E,KAAK,CAAC,6CAA6C,CAAC;IAClE;IACA;IACA,IAAI8E,QAAQ,EAAE;MACV,OAAO;QACHvE,UAAU,EAAE1B;MAChB,CAAC;IACL;IACA;IACA,MAAMqG,MAAM,GAAGvH,MAAM,CAACwH,IAAI,CAACtG,MAAM,CAAC,CAACuG,MAAM,CAAEnG,KAAK,IAAK,CAACZ,yBAAyB,CAACgH,QAAQ,CAACpG,KAAK,CAAC,CAAC;IAChG,IAAIiG,MAAM,CAACI,MAAM,GAAG,CAAC,EAAE;MACnB,MAAM,IAAItF,KAAK,CAAE,iDAAgD3B,yBAAyB,CAACkH,IAAI,CAAC,IAAI,CAAE,EAAC,CAAC;IAC5G;IACA,OAAO1G,MAAM;EACjB;AACJ,CAAC;AACD2G,MAAM,CAACC,OAAO,GAAGpI,MAAM"},"metadata":{},"sourceType":"script","externalDependencies":[]}