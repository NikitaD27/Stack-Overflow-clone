{"ast":null,"code":"\"use strict\";\n\n/**\n * Encapsulates the logic for issuing a request to the Stripe API.\n *\n * A custom HTTP client should should implement:\n * 1. A response class which extends HttpClientResponse and wraps around their\n *    own internal representation of a response.\n * 2. A client class which extends HttpClient and implements all methods,\n *    returning their own response class when making requests.\n */\nclass HttpClient {\n  /** The client name used for diagnostics. */\n  getClientName() {\n    throw new Error('getClientName not implemented.');\n  }\n  makeRequest(host, port, path, method, headers, requestData, protocol, timeout) {\n    throw new Error('makeRequest not implemented.');\n  }\n  /** Helper to make a consistent timeout error across implementations. */\n  static makeTimeoutError() {\n    const timeoutErr = new TypeError(HttpClient.TIMEOUT_ERROR_CODE);\n    timeoutErr.code = HttpClient.TIMEOUT_ERROR_CODE;\n    return timeoutErr;\n  }\n}\nHttpClient.CONNECTION_CLOSED_ERROR_CODES = ['ECONNRESET', 'EPIPE'];\nHttpClient.TIMEOUT_ERROR_CODE = 'ETIMEDOUT';\nclass HttpClientResponse {\n  constructor(statusCode, headers) {\n    this._statusCode = statusCode;\n    this._headers = headers;\n  }\n  getStatusCode() {\n    return this._statusCode;\n  }\n  getHeaders() {\n    return this._headers;\n  }\n  getRawResponse() {\n    throw new Error('getRawResponse not implemented.');\n  }\n  toStream(streamCompleteCallback) {\n    throw new Error('toStream not implemented.');\n  }\n  toJSON() {\n    throw new Error('toJSON not implemented.');\n  }\n}\nmodule.exports = {\n  HttpClient,\n  HttpClientResponse\n};","map":{"version":3,"names":["HttpClient","getClientName","Error","makeRequest","host","port","path","method","headers","requestData","protocol","timeout","makeTimeoutError","timeoutErr","TypeError","TIMEOUT_ERROR_CODE","code","CONNECTION_CLOSED_ERROR_CODES","HttpClientResponse","constructor","statusCode","_statusCode","_headers","getStatusCode","getHeaders","getRawResponse","toStream","streamCompleteCallback","toJSON","module","exports"],"sources":["C:/Users/Nikita/Stack Overflow Clone/Client/client/node_modules/stripe/lib/net/HttpClient.js"],"sourcesContent":["\"use strict\";\n/**\n * Encapsulates the logic for issuing a request to the Stripe API.\n *\n * A custom HTTP client should should implement:\n * 1. A response class which extends HttpClientResponse and wraps around their\n *    own internal representation of a response.\n * 2. A client class which extends HttpClient and implements all methods,\n *    returning their own response class when making requests.\n */\nclass HttpClient {\n    /** The client name used for diagnostics. */\n    getClientName() {\n        throw new Error('getClientName not implemented.');\n    }\n    makeRequest(host, port, path, method, headers, requestData, protocol, timeout) {\n        throw new Error('makeRequest not implemented.');\n    }\n    /** Helper to make a consistent timeout error across implementations. */\n    static makeTimeoutError() {\n        const timeoutErr = new TypeError(HttpClient.TIMEOUT_ERROR_CODE);\n        timeoutErr.code = HttpClient.TIMEOUT_ERROR_CODE;\n        return timeoutErr;\n    }\n}\nHttpClient.CONNECTION_CLOSED_ERROR_CODES = ['ECONNRESET', 'EPIPE'];\nHttpClient.TIMEOUT_ERROR_CODE = 'ETIMEDOUT';\nclass HttpClientResponse {\n    constructor(statusCode, headers) {\n        this._statusCode = statusCode;\n        this._headers = headers;\n    }\n    getStatusCode() {\n        return this._statusCode;\n    }\n    getHeaders() {\n        return this._headers;\n    }\n    getRawResponse() {\n        throw new Error('getRawResponse not implemented.');\n    }\n    toStream(streamCompleteCallback) {\n        throw new Error('toStream not implemented.');\n    }\n    toJSON() {\n        throw new Error('toJSON not implemented.');\n    }\n}\nmodule.exports = { HttpClient, HttpClientResponse };\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,UAAU,CAAC;EACb;EACAC,aAAa,GAAG;IACZ,MAAM,IAAIC,KAAK,CAAC,gCAAgC,CAAC;EACrD;EACAC,WAAW,CAACC,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAEC,MAAM,EAAEC,OAAO,EAAEC,WAAW,EAAEC,QAAQ,EAAEC,OAAO,EAAE;IAC3E,MAAM,IAAIT,KAAK,CAAC,8BAA8B,CAAC;EACnD;EACA;EACA,OAAOU,gBAAgB,GAAG;IACtB,MAAMC,UAAU,GAAG,IAAIC,SAAS,CAACd,UAAU,CAACe,kBAAkB,CAAC;IAC/DF,UAAU,CAACG,IAAI,GAAGhB,UAAU,CAACe,kBAAkB;IAC/C,OAAOF,UAAU;EACrB;AACJ;AACAb,UAAU,CAACiB,6BAA6B,GAAG,CAAC,YAAY,EAAE,OAAO,CAAC;AAClEjB,UAAU,CAACe,kBAAkB,GAAG,WAAW;AAC3C,MAAMG,kBAAkB,CAAC;EACrBC,WAAW,CAACC,UAAU,EAAEZ,OAAO,EAAE;IAC7B,IAAI,CAACa,WAAW,GAAGD,UAAU;IAC7B,IAAI,CAACE,QAAQ,GAAGd,OAAO;EAC3B;EACAe,aAAa,GAAG;IACZ,OAAO,IAAI,CAACF,WAAW;EAC3B;EACAG,UAAU,GAAG;IACT,OAAO,IAAI,CAACF,QAAQ;EACxB;EACAG,cAAc,GAAG;IACb,MAAM,IAAIvB,KAAK,CAAC,iCAAiC,CAAC;EACtD;EACAwB,QAAQ,CAACC,sBAAsB,EAAE;IAC7B,MAAM,IAAIzB,KAAK,CAAC,2BAA2B,CAAC;EAChD;EACA0B,MAAM,GAAG;IACL,MAAM,IAAI1B,KAAK,CAAC,yBAAyB,CAAC;EAC9C;AACJ;AACA2B,MAAM,CAACC,OAAO,GAAG;EAAE9B,UAAU;EAAEkB;AAAmB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}