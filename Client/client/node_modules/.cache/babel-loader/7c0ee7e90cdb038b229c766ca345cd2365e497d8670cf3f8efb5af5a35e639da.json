{"ast":null,"code":"\"use strict\";\n\nconst utils = require(\"./utils\");\nconst autoPagination = require(\"./autoPagination\");\nconst makeAutoPaginationMethods = autoPagination.makeAutoPaginationMethods;\n/**\n * Create an API method from the declared spec.\n *\n * @param [spec.method='GET'] Request Method (POST, GET, DELETE, PUT)\n * @param [spec.path=''] Path to be appended to the API BASE_PATH, joined with\n *  the instance's path (e.g. 'charges' or 'customers')\n * @param [spec.fullPath=''] Fully qualified path to the method (eg. /v1/a/b/c).\n *  If this is specified, path should not be specified.\n * @param [spec.urlParams=[]] Array of required arguments in the order that they\n *  must be passed by the consumer of the API. Subsequent optional arguments are\n *  optionally passed through a hash (Object) as the penultimate argument\n *  (preceding the also-optional callback argument\n * @param [spec.encode] Function for mutating input parameters to a method.\n *  Usefully for applying transforms to data on a per-method basis.\n * @param [spec.host] Hostname for the request.\n */\nfunction stripeMethod(spec) {\n  if (spec.path !== undefined && spec.fullPath !== undefined) {\n    throw new Error(`Method spec specified both a 'path' (${spec.path}) and a 'fullPath' (${spec.fullPath}).`);\n  }\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    const callback = typeof args[args.length - 1] == 'function' && args.pop();\n    spec.urlParams = utils.extractUrlParams(spec.fullPath || this.createResourcePathWithSymbols(spec.path || ''));\n    const requestPromise = utils.callbackifyPromiseWithTimeout(this._makeRequest(args, spec, {}), callback);\n    // Please note `spec.methodType === 'search'` is beta functionality and this\n    // interface is subject to change/removal at any time.\n    if (spec.methodType === 'list' || spec.methodType === 'search') {\n      const autoPaginationMethods = makeAutoPaginationMethods(this, args, spec, requestPromise);\n      Object.assign(requestPromise, autoPaginationMethods);\n    }\n    return requestPromise;\n  };\n}\nmodule.exports = stripeMethod;","map":{"version":3,"names":["utils","require","autoPagination","makeAutoPaginationMethods","stripeMethod","spec","path","undefined","fullPath","Error","args","callback","length","pop","urlParams","extractUrlParams","createResourcePathWithSymbols","requestPromise","callbackifyPromiseWithTimeout","_makeRequest","methodType","autoPaginationMethods","Object","assign","module","exports"],"sources":["C:/Users/Nikita/Stack Overflow Clone/Client/client/node_modules/stripe/lib/StripeMethod.js"],"sourcesContent":["\"use strict\";\nconst utils = require(\"./utils\");\nconst autoPagination = require(\"./autoPagination\");\nconst makeAutoPaginationMethods = autoPagination.makeAutoPaginationMethods;\n/**\n * Create an API method from the declared spec.\n *\n * @param [spec.method='GET'] Request Method (POST, GET, DELETE, PUT)\n * @param [spec.path=''] Path to be appended to the API BASE_PATH, joined with\n *  the instance's path (e.g. 'charges' or 'customers')\n * @param [spec.fullPath=''] Fully qualified path to the method (eg. /v1/a/b/c).\n *  If this is specified, path should not be specified.\n * @param [spec.urlParams=[]] Array of required arguments in the order that they\n *  must be passed by the consumer of the API. Subsequent optional arguments are\n *  optionally passed through a hash (Object) as the penultimate argument\n *  (preceding the also-optional callback argument\n * @param [spec.encode] Function for mutating input parameters to a method.\n *  Usefully for applying transforms to data on a per-method basis.\n * @param [spec.host] Hostname for the request.\n */\nfunction stripeMethod(spec) {\n    if (spec.path !== undefined && spec.fullPath !== undefined) {\n        throw new Error(`Method spec specified both a 'path' (${spec.path}) and a 'fullPath' (${spec.fullPath}).`);\n    }\n    return function (...args) {\n        const callback = typeof args[args.length - 1] == 'function' && args.pop();\n        spec.urlParams = utils.extractUrlParams(spec.fullPath || this.createResourcePathWithSymbols(spec.path || ''));\n        const requestPromise = utils.callbackifyPromiseWithTimeout(this._makeRequest(args, spec, {}), callback);\n        // Please note `spec.methodType === 'search'` is beta functionality and this\n        // interface is subject to change/removal at any time.\n        if (spec.methodType === 'list' || spec.methodType === 'search') {\n            const autoPaginationMethods = makeAutoPaginationMethods(this, args, spec, requestPromise);\n            Object.assign(requestPromise, autoPaginationMethods);\n        }\n        return requestPromise;\n    };\n}\nmodule.exports = stripeMethod;\n"],"mappings":"AAAA,YAAY;;AACZ,MAAMA,KAAK,GAAGC,OAAO,CAAC,SAAS,CAAC;AAChC,MAAMC,cAAc,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AAClD,MAAME,yBAAyB,GAAGD,cAAc,CAACC,yBAAyB;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,YAAY,CAACC,IAAI,EAAE;EACxB,IAAIA,IAAI,CAACC,IAAI,KAAKC,SAAS,IAAIF,IAAI,CAACG,QAAQ,KAAKD,SAAS,EAAE;IACxD,MAAM,IAAIE,KAAK,CAAE,wCAAuCJ,IAAI,CAACC,IAAK,uBAAsBD,IAAI,CAACG,QAAS,IAAG,CAAC;EAC9G;EACA,OAAO,YAAmB;IAAA,kCAANE,IAAI;MAAJA,IAAI;IAAA;IACpB,MAAMC,QAAQ,GAAG,OAAOD,IAAI,CAACA,IAAI,CAACE,MAAM,GAAG,CAAC,CAAC,IAAI,UAAU,IAAIF,IAAI,CAACG,GAAG,EAAE;IACzER,IAAI,CAACS,SAAS,GAAGd,KAAK,CAACe,gBAAgB,CAACV,IAAI,CAACG,QAAQ,IAAI,IAAI,CAACQ,6BAA6B,CAACX,IAAI,CAACC,IAAI,IAAI,EAAE,CAAC,CAAC;IAC7G,MAAMW,cAAc,GAAGjB,KAAK,CAACkB,6BAA6B,CAAC,IAAI,CAACC,YAAY,CAACT,IAAI,EAAEL,IAAI,EAAE,CAAC,CAAC,CAAC,EAAEM,QAAQ,CAAC;IACvG;IACA;IACA,IAAIN,IAAI,CAACe,UAAU,KAAK,MAAM,IAAIf,IAAI,CAACe,UAAU,KAAK,QAAQ,EAAE;MAC5D,MAAMC,qBAAqB,GAAGlB,yBAAyB,CAAC,IAAI,EAAEO,IAAI,EAAEL,IAAI,EAAEY,cAAc,CAAC;MACzFK,MAAM,CAACC,MAAM,CAACN,cAAc,EAAEI,qBAAqB,CAAC;IACxD;IACA,OAAOJ,cAAc;EACzB,CAAC;AACL;AACAO,MAAM,CAACC,OAAO,GAAGrB,YAAY"},"metadata":{},"sourceType":"script","externalDependencies":[]}